// Code generated by MockGen. DO NOT EDIT.
// Source: ./index.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	template "html/template"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIndexUsecase is a mock of IndexUsecase interface.
type MockIndexUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIndexUsecaseMockRecorder
}

// MockIndexUsecaseMockRecorder is the mock recorder for MockIndexUsecase.
type MockIndexUsecaseMockRecorder struct {
	mock *MockIndexUsecase
}

// NewMockIndexUsecase creates a new mock instance.
func NewMockIndexUsecase(ctrl *gomock.Controller) *MockIndexUsecase {
	mock := &MockIndexUsecase{ctrl: ctrl}
	mock.recorder = &MockIndexUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexUsecase) EXPECT() *MockIndexUsecaseMockRecorder {
	return m.recorder
}

// Index mocks base method.
func (m *MockIndexUsecase) Index(ctx context.Context) (*template.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", ctx)
	ret0, _ := ret[0].(*template.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index.
func (mr *MockIndexUsecaseMockRecorder) Index(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockIndexUsecase)(nil).Index), ctx)
}

// Ready mocks base method.
func (m *MockIndexUsecase) Ready(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ready indicates an expected call of Ready.
func (mr *MockIndexUsecaseMockRecorder) Ready(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockIndexUsecase)(nil).Ready), ctx)
}
